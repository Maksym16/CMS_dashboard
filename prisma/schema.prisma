// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String       @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]  @relation("ProjectToBillboard")
  categories  Category[]   @relation("ProjectToCategory")
  sizes       Size[]       @relation("ProjectToSize")
  coffeeTypes CoffeeType[] @relation("ProjectToCoffeeType")
  roastTypes  RoastType[]  @relation("ProjectToRoastType")
  regions      Region[]     @relation("ProjectToRegion")
  products    Product[]    @relation("ProjectToProduct")
  orders      Order[]      @relation("ProjectToOrder")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  projectId  String
  project    Project    @relation("ProjectToBillboard", fields: [projectId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([projectId])
}

model Category {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation("ProjectToCategory", fields: [projectId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation("ProjectToSize", fields: [projectId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([projectId])
}

model CoffeeType {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation("ProjectToCoffeeType", fields: [projectId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([projectId])
}

model RoastType {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation("ProjectToRoastType", fields: [projectId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([projectId])
}

model Region {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation("ProjectToRegion", fields: [projectId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([projectId])
}

model Product {
  id           String      @id @default(uuid())
  projectId    String
  project      Project     @relation("ProjectToProduct", fields: [projectId], references: [id])
  categoryId   String
  category     Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  price        Decimal
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  sizeId       String
  size         Size        @relation(fields: [sizeId], references: [id])
  coffeeTypeId String
  coffeeType   CoffeeType  @relation(fields: [coffeeTypeId], references: [id])
  roastTypeId  String
  roastType    RoastType   @relation(fields: [roastTypeId], references: [id])
  regionId     String
  region       Region     @relation(fields: [regionId], references: [id])
  images       Image[]
  description  String
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt


  @@index([projectId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([coffeeTypeId])
  @@index([roastTypeId])
  @@index([regionId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  projectId  String
  project    Project     @relation("ProjectToOrder", fields: [projectId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([projectId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
